---
layout: post
title:  "Week 2-Starting Markdown"
date:   2022-02-02 17:54:21 -0500
categories: work
---
This Week I worked on attempting to get a small game working in Turtleblocks!

When I decided to make a game with Turtleblocks, I knew there were a few things I had to keep in mind:

1. The game needed to revolve on a simple loop: In order to keep the program from getting too complicated, I decided to make sure the game was simple so I wouldn't have a million blocks all over the place. This would then neccesitate a "High Score" style game.
2. The game needed simple collision: Since TurtleBlocks does not have any specific collision functions built in, I had to make my own. As a result, the game I made would need to have very simple collision detection, both for my own sanity and so that the program wouldn't crash due to the number of checks it would be performing per second.
3. The game needed to involve as little turtles as possible. This is so that the engine wouldn't have to do as much math and calculations, and so I wouldn't lose track of any turtles I made.

After considering these facts, I decided upon making a version of the game "Flappy Bird" as it fit all of those criteria.

I first worked on the main bird, which would contain most of the controllers for the game, including the Bird Gravity and Key Checking. It also handles the main collision.
(NOTE: Due to the way TurtleBlocks seems to want to work, the Collision checks are visually overlapping a bit which can make it a tad annoying to move around and show. The checks are the same, just for different pipes)
![FBSC1](https://edmarrs.github.io/images/fbsc1.PNG)

After getting that working, I then worked on the Pipes that the player would need to move through. These needed to move left at a consistant rate at a set distance apart from each other. Therefore I used one pipe as the main one, which controls the other pipe.
![FBSC2](https://edmarrs.github.io/images/fbsc2.PNG)
Once the next set of pipes appear, the player earns a point. They keep earning points until they hit a pipe.

After this was operational, I also needed the functionality to set the starting point of the Pipes as well as tell them to move left at a consistant rate.
![FBSC3](https://edmarrs.github.io/images/fbsc3.PNG)

Finally, I also needed to make sure that the pipe sprites appeared in the proper place. Since turtle blocks centers all images on the center of the turtle, I made 2 new turtles which follow the main ones and display the pipe sprites so that the player can tell where they are.
![FBSC4](https://edmarrs.github.io/images/fbsc4.PNG)

Overall, this was a very fun challenge to work on! It was interesting trying to use the limitations of block based code to do very specific tasks.
One think I wish turtle blocks had is better documentation. The documentation that I could find is not very good. I would like a document with all possible blocks, and how they work, as I feel like I had to hunt for some of the blocks I needed.


 





